@inherits LayoutComponentBase
@inject IPlatformService PlatformService
@inject AppState AppState
@implements IDisposable

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        DevTypeVm.Id: @AppState.DeviceTypeVm.Id ||
        HwConfig.Id : @AppState.HardwareConfigVm.Id ||
        SWSystem.Id: @AppState.SoftwareSystemVm.Id ||
        SWVersion.Id: @AppState.SoftwareVersionVm.Id ||
        LoadVm.Id: @AppState.LoadVm.Id
        <MudSpacer />
        <MenuPicker MenuIcon="@Icons.Material.Filled.DeviceHub"
                    ToolTipColor="Color.Warning"
                    ToolTipText="Platform"
                    OnItemClick="SetDeviceType"
                    ListType="PlatformListName.Platform" />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Link="/user/settings" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="3">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Color="Color.Primary" Class="pl-6 mt-2">@AppState?.DeviceTypeVm?.Platform</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-8 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {

    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetDeviceType(GenericListVm genericListVm)
    {
        var deviceTypeVm = await PlatformService.GetDeviceTypeVmFromGenericVm(genericListVm);
        AppState.UpdateDeviceTypeVm(this, deviceTypeVm);
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

}