@namespace DRApplication.Client.Pages.Platforms
@inject DeviceTypeManager manager
@inject MaintainerManager maintainerManager
@inject NavigationManager navigation

@page "/devicetype/edit/{deviceTypeId:int}"

<MudText Typo="Typo.h3" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.LocalAirport" Size="Size.Large" Class="m-3" />
    Edit Device Type
</MudText>

@if (@DeviceTypeEditVm is not null && _maintainerVms is not null)
{
    <GenericForm CancelPath="/devicetypes" Item="DeviceTypeEditVm" Model="DeviceTypeEditVm" TItem="DeviceTypeEditVm" OnValidSubmit="UpdateDeviceType">
        <FormItems>

            <MudPaper Class="pa-2 ma-2" Elevation="0">
                <MudTextField Label="Device Type" @bind-Value="DeviceTypeEditVm.Name" For="@(() => DeviceTypeEditVm.Name)" />
            </MudPaper>

            <MudPaper Class="pa-2 ma-2" Elevation="0">
                <MudSelect Label="Maintainer" @bind-Value="DeviceTypeEditVm.MaintainerId">
                    @foreach (var maintainer in _maintainerVms)
                    {
                        <MudSelectItem Value="maintainer.Id">@maintainer.Name</MudSelectItem>
                    }
                </MudSelect>

            </MudPaper>

            <MudPaper Class="pa-2 ma-2" Elevation="0">
                <MudCheckBox T="bool" @bind-Checked="DeviceTypeEditVm.IsActive" Label="Is Active?" />
            </MudPaper>

        </FormItems>
    </GenericForm>


}

@code {

    [Parameter]
    public int DeviceTypeId { get; set; }

    public DeviceTypeEditVm DeviceTypeEditVm { get; set; } = new();

    private int SelectedMaintainerId;

    private IEnumerable<MaintainerVm>? _maintainerVms;

    void UpdateMaintainer(int? id)
    {
        DeviceTypeEditVm.MaintainerId = Convert.ToInt32(id);
    }

    protected async Task UpdateDeviceType()
    {
        var deviceType = Mapping.Mapper.Map<DeviceType>(DeviceTypeEditVm);
        await manager.UpdateAsync(deviceType);
        navigation.NavigateTo("/deviceTypes");
    }

    protected override async Task OnParametersSetAsync()
    {
        var deviceType = await manager.GetByIdAsync(DeviceTypeId);
        DeviceTypeEditVm = Mapping.Mapper.Map<DeviceTypeEditVm>(deviceType);

        var maintainers = await maintainerManager.GetAllAsync();
        _maintainerVms = Mapping.Mapper.Map<IEnumerable<MaintainerVm>>(maintainers);
    }
}