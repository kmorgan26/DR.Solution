@namespace DRApplication.Client.Controls
@inject IPlatformService PlatformService
@inject ILoadService LoadService
@inject AppState AppState
@implements IDisposable

<MudGrid Spacing="2" Justify="Justify.Center">
    @if (!_isBusy && AppState.DeviceVms is not null)
    {
        @foreach (var deviceVm in AppState.DeviceVms)
        {
            <DeviceCard DeviceVm="deviceVm"></DeviceCard>
        }
    }
</MudGrid>

@code {

    [Parameter]
    public int DeviceTypeId { get; set; }

    async Task SetDeviceTypeVm()
    {
        var deviceTypeVm = await PlatformService.GetDeviceTypeVmById(DeviceTypeId);
        AppState.UpdateDeviceTypeVm(this, deviceTypeVm);
    }
    async Task SetCurrentLoads() //This may not need to run if the current loads are set for current DeviceType
    {
        var currentLoadVms = await LoadService.GetCurrentLoadVmsByDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateCurrentLoadVms(this, currentLoadVms);
    }

    async Task SetDeviceCards()
    {
        var deviceVms = await PlatformService.GetDeviceVmsFromDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateDeviceVms(this, deviceVms);
    }

    async Task SetSpecificLoads()
    {
        var specificLoadVms = await LoadService.GetSpecificLoadVmsByDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateSpecificLoadVms(this, specificLoadVms);
    }

    bool _isBusy;

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceTypeVm")
            {
                this.DeviceTypeId = AppState.DeviceTypeVm.Id;
                await SetCurrentLoads();
                await SetSpecificLoads();
                await SetDeviceCards();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;

        if (DeviceTypeId != AppState.DeviceTypeVm.Id)
        {
            //There is a change of platform
            await SetDeviceTypeVm();
        }

        await SetCurrentLoads();
        await SetSpecificLoads();
        await SetDeviceCards();

        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}