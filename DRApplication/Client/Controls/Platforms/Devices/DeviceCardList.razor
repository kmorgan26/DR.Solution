@namespace DRApplication.Client.Controls
@inject IPlatformService PlatformService
@inject DeviceManager DeviceManager
@inject AppState AppState
@implements IDisposable

<MudGrid Spacing="2" Justify="Justify.Center">
    @if (!_isBusy && AppState.DeviceVms is not null)
    {
        @foreach (var item in AppState.DeviceVms)
        {
            <DeviceCard DeviceVm="item"></DeviceCard>
        }
    }
</MudGrid>

@code {

    [Parameter]
    public int DeviceTypeId { get; set; }

    async Task SetDeviceCards()
    {
        var deviceVms = await PlatformService.GetDeviceVmsFromDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateDeviceVms(this, deviceVms);
    }

    bool _isBusy;

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceTypeVm")
            {
                await SetDeviceCards();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        var deviceTypeVm = await PlatformService.GetDeviceTypeVmById(DeviceTypeId);
        AppState.UpdateDeviceTypeVm(this, deviceTypeVm);

        await SetDeviceCards();
        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}