@namespace DRApplication.Client.Controls
@inject IPlatformService PlatformService
@inject AppState AppState
@implements IDisposable

@if (!_isBusy)
{
    <MudSelect Variant="Variant.Outlined" T="int" Label="Device" Value="@AppState.DeviceVm.Id" ValueChanged="@OnDeviceIdChanged">
        <MudSelectItem Value="0">SELECT Device</MudSelectItem>
        @foreach (var item in @AppState.DeviceVms)
        {
            <MudSelectItem Value="@item.Id">@item.Device</MudSelectItem>
        }
    </MudSelect>
}

@code {

    bool _isBusy;

    [Parameter]
    public EventCallback<int> OnDeviceIdChanged { get; set; }

    private async Task SetDevices()
    {
        var items = await PlatformService.GetDeviceVmsFromDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateDeviceVms(this, items);
    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceTypeVm")
            {
                await SetDevices();
                AppState.UpdateDeviceVm(this, new DeviceVm());
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetDevices();
        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}