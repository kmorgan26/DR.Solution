@namespace DRApplication.Client.Controls
@inject AppState AppState
@implements IDisposable

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="6" lg="3">
        <MudCard Elevation="5">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Success" Size="Size.Medium">
                        @DeviceVm.Device.ToString().Substring(2)
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudLink Typo="Typo.h6" Color="Color.Primary" Href="@($"/device/details/{@DeviceVm.Id}")">
                        @AppState.DeviceTypeVm.Platform
                        @DeviceVm.Device
                    </MudLink>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudTooltip Text="Primary Load">
                    <MudChip Icon="@Icons.Filled.Checklist" Label="true" Color="Color.Warning">
                        <MudLink Href="@($"/loadviewer/{@_currentLoadVm.Id}")">
                            @_currentLoadVm.LoadName
                        </MudLink>
                    </MudChip>
                </MudTooltip>
                <MudTooltip Text="Device Specific Load">
                    <MudChip Icon="@Icons.Filled.Architecture" Label="true" Color="Color.Info">
                        <MudLink Href="@($"/loadviewer/{@_specificLoadVm.Id}")">
                            @_specificLoadVm.LoadName
                        </MudLink>
                    </MudChip>
                </MudTooltip>
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
            </MudCardActions>
        </MudCard>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public DeviceVm DeviceVm { get; set; } = new();

    private CurrentLoadVm _currentLoadVm = new();
    private SpecificLoadVm _specificLoadVm = new();

    async Task SetCurrentLoadVm()
    {
        var currentLoadVm = await Task.Run(() => AppState.CurrentLoadVms.Where(i => i.DeviceId == this.DeviceVm.Id).FirstOrDefault());
        if (currentLoadVm is not null)
            _currentLoadVm = currentLoadVm;
    }
    async Task SetSpecificLoadVm()
    {
        var specificLoadVm = await Task.Run(() => AppState.SpecificLoadVms.Where(i => i.DeviceId == this.DeviceVm.Id).FirstOrDefault());
        if (specificLoadVm is not null)
            _specificLoadVm = specificLoadVm;
    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceVms")
            {
                await SetCurrentLoadVm();
                await SetSpecificLoadVm();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetCurrentLoadVm();
        await SetSpecificLoadVm();

        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}