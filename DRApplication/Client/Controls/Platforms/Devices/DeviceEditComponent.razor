@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject DeviceManager DeviceManager
@inject IPlatformService PlatformService
@inject NavigationManager navigation
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@AppState.DeviceVm" OnValidSubmit="@UpdateDevice">

            <MudTextField @bind-Value="AppState.DeviceVm.Device" Class="my-6" Label="Device" Variant="Variant.Outlined"></MudTextField>

            <DeviceTypeSelect OnDeviceTypeIdChanged="UpdateDeviceTypeVmForDeviceVm"></DeviceTypeSelect>

            <MudCheckBox Class="my-6" Label="Active?" @bind-Checked="@AppState.DeviceVm.IsActive" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="devices" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int DeviceId { get; set; }

    async Task UpdateDeviceTypeVmForDeviceVm(int id)
    {
        if (id > 0)
        {
            var deviceTypeVm = await PlatformService.GetDeviceTypeVmById(id);

            var deviceVm = AppState.DeviceVm;
            deviceVm.DeviceTypeId = id;

            AppState.UpdateDeviceTypeVm(this, deviceTypeVm);
            AppState.UpdateDeviceVm(this, deviceVm);
        }
    }

    protected async Task UpdateDevice()
    {
        var device = await PlatformService.GetDeviceFromDeviceVm(AppState.DeviceVm);
        await DeviceManager.UpdateAsync(device);
        Snackbar.Add($"{device.Name} was updated", Severity.Success);
        navigation.NavigateTo("/devices");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        var device = await DeviceManager.GetByIdAsync(DeviceId);
        var vm = Mapping.Mapper.Map<DeviceVm>(device);
        AppState.UpdateDeviceVm(this, vm);
        _isBusy = false;
    }

}
