@namespace DRApplication.Client.Controls.Platforms
@inject DeviceManager manager
@inject NavigationManager navigation

<div class="row">
    <div class="col-md-6 col-sm-12">
        @if (@DeviceEditVm != null)
        {
            <EditForm Model="@DeviceEditVm" OnValidSubmit="@UpdateDevice">

                <div class="form-group">
                    <label for="Name">Device</label>
                    <InputText class="form-control" @bind-Value="DeviceEditVm.Name" />
                </div>

                <DeviceTypeSelectComponent DeviceTypeIdChange="UpdateDeviceType" SelectedDeviceTypeId="@DeviceEditVm.DeviceTypeId"></DeviceTypeSelectComponent>

                <div class="form-group">
                    <label for="isactive">Active?</label>
                    <InputCheckbox id="isactive" @bind-Value="DeviceEditVm.IsActive" />
                </div>

                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Size="Size.Small">Update</MudButton>
                <MudButton Link="/devices" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Cancel</MudButton>

            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public int DeviceId { get; set; }

    public DeviceEditVm DeviceEditVm { get; set; } = new();

    void UpdateDeviceType(int? id)
    {
        DeviceEditVm.DeviceTypeId = Convert.ToInt32(id);
    }
    protected async Task UpdateDevice()
    {
        var device = Mapping.Mapper.Map<Device>(DeviceEditVm);
        await manager.UpdateAsync(device);
        navigation.NavigateTo("/devices");
    }

    protected override async Task OnInitializedAsync()
    {
        var devices = await manager.GetByIdAsync(DeviceId);
        DeviceEditVm = Mapping.Mapper.Map<DeviceEditVm>(devices);
    }
}