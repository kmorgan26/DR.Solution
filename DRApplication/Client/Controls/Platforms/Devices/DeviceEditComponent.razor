@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject DeviceManager DeviceManager
@inject IPlatformService PlatformService
@inject IMapperService MapperService
@inject NavigationManager navigation
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@_deviceEditVm" OnValidSubmit="@UpdateDevice">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <MudTextField @bind-Value="_deviceEditVm.Device" 
                Class="my-6" 
                Label="Device" 
                Variant="Variant.Outlined" 
                For="@(() => _deviceEditVm.Device)" />

            <DeviceTypeSelect OnDeviceTypeIdChanged="UpdateDeviceTypeId"></DeviceTypeSelect>

            <MudCheckBox Class="my-6" Label="Active?" @bind-Checked="@_deviceEditVm.IsActive" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="devices" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int DeviceId { get; set; }

    private DeviceEditVm _deviceEditVm = new();

    void UpdateDeviceTypeId(int id)
    {
        if (id > 0)
        {
            _deviceEditVm.DeviceTypeId = id;
        }
    }

    protected async Task UpdateDevice()
    {
        var device = await MapperService.DeviceFromDeviceEditVmAsync(_deviceEditVm);
        await DeviceManager.UpdateAsync(device);
        Snackbar.Add($"{device.Name} was updated", Severity.Success);
        navigation.NavigateTo("/devices");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        _deviceEditVm = await PlatformService.GetDeviceEditVmByIdAsync(DeviceId);
        _isBusy = false;
    }
}