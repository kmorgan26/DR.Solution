@namespace DRApplication.Client.Controls
@inject IPlatformService PlatformService
@inject NavigationManager navigation
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">

        <EditForm Model="@_maintainerEditVm" OnValidSubmit="@UpdateMaintainer">

            <FluentValidationValidator DisableAssemblyScanning="true" />
            
            <MudTextField @bind-Value="_maintainerEditVm.Name" 
                Variant="Variant.Outlined"
                For="(() => _maintainerEditVm.Name)"
                Label="Maintainer Name"
                Class="my-6" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="maintainers" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int MaintainerId { get; set; }

    private MaintainerEditVm _maintainerEditVm = new();

    protected async Task UpdateMaintainer()
    {
        var result = await PlatformService.UpdateMaintainerFromMaintainerEditVm(_maintainerEditVm);

        if(result)
            Snackbar.Add($"{_maintainerEditVm.Name} was updated", Severity.Success);

        navigation.NavigateTo("/maintainers");
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        _maintainerEditVm = await PlatformService.GetMaintainerEditVmById(MaintainerId);
        _isBusy = false;
    }
}