@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject IPlatformService PlatformService
@inject DeviceTypeManager DeviceTypeManager
@inject NavigationManager navigation
@inject ISnackbar Snackbar

@if (_deviceTypeInsertVm != null)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@_deviceTypeInsertVm" OnValidSubmit="@InsertDeviceType">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <MudTextField @bind-Value="_deviceTypeInsertVm.Platform" 
                Variant="Variant.Outlined"
                For="(() => _deviceTypeInsertVm.Platform)"
                Label="Platform"
                Class="my-6" />

            <MaintainerSelect OnMaintainerIdChanged="UpdateMaintainer" />

            <MudCheckBox Class="my-6" Label="Active?" @bind-Checked="@_deviceTypeInsertVm.IsActive" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Insert" />
                <CancelButton Url="devicetypes" />
            </MudPaper>
        </EditForm>
    </MudItem>

}

@code {

    private DeviceTypeInsertVm _deviceTypeInsertVm { get; set; } = new();

    async Task UpdateMaintainer(int id)
    {
        if (id > 0)
        {
            await Task.Run(() => _deviceTypeInsertVm.MaintainerId = id);
        }

    }

    private async Task InsertDeviceType()
    {
        var result = await PlatformService.InsertDeviceTypeFromDeviceTypeInsertVm(_deviceTypeInsertVm);

        if(result > 0)
            Snackbar.Add($"The new Platform was Added!", Severity.Success);

        navigation.NavigateTo("/devicetypes");
    }
    protected override async Task OnInitializedAsync()
    {
        if(AppState.MaintainerVm is not null)
            await Task.Run(() => _deviceTypeInsertVm.MaintainerId = AppState.MaintainerVm.Id);
    }
}