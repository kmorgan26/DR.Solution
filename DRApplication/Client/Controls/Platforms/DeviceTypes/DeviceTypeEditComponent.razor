@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject DeviceTypeManager DeviceTypeManager
@inject IPlatformService PlatformService
@inject NavigationManager navigation

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@AppState.DeviceTypeVm" OnValidSubmit="@UpdateDeviceType">

            <MudTextField @bind-Value="AppState.DeviceTypeVm.Platform" Class="my-6" Label="Device Type" Variant="Variant.Outlined"></MudTextField>

            <MaintainerSelect OnMaintainerIdChanged="UpdateMaintainerVm" />

            <MudCheckBox Class="my-6" Label="Active?" @bind-Checked="@AppState.DeviceTypeVm.IsActive" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="devicetypes" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int DeviceTypeId { get; set; }

    void UpdateMaintainerVm(int id)
    {
        if (id > 0)
        {
            var deviceTypeVm = AppState.DeviceTypeVm;
            deviceTypeVm.MaintainerId = id;
            AppState.UpdateDeviceTypeVm(this, deviceTypeVm);
        }
    }

    protected async Task UpdateDeviceType()
    {
        var deviceType = await PlatformService.GetDeviceTypeFromDeviceTypeVm(AppState.DeviceTypeVm);
        await DeviceTypeManager.UpdateAsync(deviceType);
        navigation.NavigateTo("/devicetypes");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        var deviceTypeVm = await PlatformService.GetDeviceTypeVmById(DeviceTypeId);
        AppState.UpdateDeviceTypeVm(this, deviceTypeVm);
        _isBusy = false;
    }
}