@namespace DRApplication.Client.Controls
@inject DeviceTypeManager DeviceTypeManager
@inject IPlatformService PlatformService
@inject IMapperService MapperService
@inject NavigationManager navigation
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="_deviceTypeEditVm" OnValidSubmit="@UpdateDeviceType">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <MudTextField @bind-Value="_deviceTypeEditVm.Platform" 
                Variant="Variant.Outlined" 
                For="(() => _deviceTypeEditVm.Platform)"
                Label="Device Type" 
                Class="my-6" />

            <MaintainerSelect OnMaintainerIdChanged="UpdateMaintainerId" />

            <MudCheckBox Class="my-6" Label="Active?" @bind-Checked="@_deviceTypeEditVm.IsActive" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="devicetypes" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int DeviceTypeId { get; set; }

    private DeviceTypeEditVm _deviceTypeEditVm = new();

    void UpdateMaintainerId(int id)
    {
        if (id > 0)
        {
            _deviceTypeEditVm.MaintainerId = id;
        }
    }

    protected async Task UpdateDeviceType()
    {
        var deviceType = await MapperService.DeviceTypeFromDeviceTypeEditVmAsync(_deviceTypeEditVm);
        await DeviceTypeManager.UpdateAsync(deviceType);
        Snackbar.Add($"{_deviceTypeEditVm.Platform} was updated", Severity.Success);
        navigation.NavigateTo("/devicetypes");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        _deviceTypeEditVm = await PlatformService.GetDeviceTypeEditVmByIdAsync(DeviceTypeId);
        _isBusy = false;
    }
}