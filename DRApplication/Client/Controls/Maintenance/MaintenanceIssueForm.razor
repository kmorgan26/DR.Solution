@namespace DRApplication.Client.Controls
@inject IIssueService IssueService
@inject AppState AppState
@inject NavigationManager NavigationManager

@if (!_isBusy)
{
    <EditForm Model="@_maintenanceIssueInsertVm" OnValidSubmit="@InsertMaintenanceIssue">

        <FluentValidationValidator DisableAssemblyScanning="true" />

        <MudGrid>
            <MudItem xs="12" sm="12" md="4" lg="2">
                <MudDatePicker @bind-Date="@_maintenanceIssueInsertVm.IssueDate"
                           Class="my-6"
                           For="(() => _maintenanceIssueInsertVm.IssueDate)"
                           Label="Issue Date"
                           Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="12" md="4" lg="2">
                <MudPaper Class="pt-6" Elevation="0">
                    <MudTextField T="string" @bind-Value="@_maintenanceIssueInsertVm.Pid"
                              For="(()=> _maintenanceIssueInsertVm.Pid)"
                              Label="PID"
                              Variant="Variant.Outlined" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="4" lg="1">
                <MudPaper Class="pt-8" Elevation="0">
                    <MudCheckBox @bind-Checked="@_maintenanceIssueInsertVm.IsContractor" Label="Contractor?" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="4" lg="1">
                <MudPaper Class="pt-8" Elevation="0">
                    <MudCheckBox @bind-Checked="@_maintenanceIssueInsertVm.IsDeferred" Label="Open/Deferred?" />
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem>
                <CorrectiveActionRadios OnSelectedOptionChanged="CorrectiveActionChange" />
                <ValidationMessage For="(() => _maintenanceIssueInsertVm.CorrectiveActionId)" />
            </MudItem>
        </MudGrid>
        <MudGrid Class="mb-2">
            <MudItem xs="12" sm="12" md="6" lg="4">
                <MudTextField @bind-Value="@_maintenanceIssueInsertVm.Description"
                          For="(()=> _maintenanceIssueInsertVm.Description)"
                          T="string"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="3" />
            </MudItem>
            <MudItem xs="12" sm="12" md="6" lg="4">
                <MudTextField @bind-Value="@_maintenanceIssueInsertVm.ActionTaken"
                          For="(()=> _maintenanceIssueInsertVm.ActionTaken)"
                          T="string"
                          Label="Action Taken"
                          Variant="Variant.Outlined"
                          Lines="3" />
            </MudItem>
        </MudGrid>
        <MudHidden @bind-Value="_maintenanceIssueInsertVm.DeviceId" />

        <MudPaper Elevation="0">
            <SubmitButton ButtonText="Enter" />
        </MudPaper>

    </EditForm>
}

@code {

    bool _isBusy;

    private MaintenanceIssueInsertVm _maintenanceIssueInsertVm { get; set; } = new();

    void ResetForm()
    {
        var enteredDate = _maintenanceIssueInsertVm.IssueDate;
        var deviceId = _maintenanceIssueInsertVm.DeviceId;

        _maintenanceIssueInsertVm = new MaintenanceIssueInsertVm()
            {
                IssueDate = enteredDate,
                DeviceId = deviceId
            };
        //TODO: This is a hack to get the Table to update while listening for DeviceVm Changes.
        var deviceVm = AppState.DeviceVm;
        AppState.UpdateDeviceVm(this, deviceVm);
    }
    async Task CorrectiveActionChange(int id)
    {
        await Task.Run(() => _maintenanceIssueInsertVm.CorrectiveActionId = id);
    }
    async Task InsertMaintenanceIssue()
    {
        _maintenanceIssueInsertVm.DeviceId = AppState.DeviceVm.Id;
        await IssueService.InsertMaintenanceIssueAsync(_maintenanceIssueInsertVm);
        ResetForm();
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        await Task.Run(() => _maintenanceIssueInsertVm.DeviceId = AppState.DeviceVm.Id);
        _isBusy = false;
    }
}