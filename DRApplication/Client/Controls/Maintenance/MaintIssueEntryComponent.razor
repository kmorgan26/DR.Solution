@namespace DRApplication.Client.Controls
@inject IPlatformService PlatformService
@inject AppState AppState
@implements IDisposable

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <DeviceSelect OnDeviceIdChanged="ChangeDevice" />
    </MudItem>
}

@code {

    [Parameter]
    public int DeviceId { get; set; }

    bool _isBusy;

    async Task ChangeDevice(int id)
    {
        var deviceVm = await PlatformService.GetDeviceVmById(id);
        DeviceId = deviceVm.Id;
        AppState.UpdateDeviceVm(this, deviceVm);
    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "asdf")
            {
                await ChangeDevice(DeviceId);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        if (DeviceId != @AppState.DeviceVm.Id)
        {
            await ChangeDevice(DeviceId);
        }

        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}
