@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject IPlatformService PlatformService
@inject IIssueService IssueService
@implements IDisposable

@if (!_isBusy && _maintenanceIssueVms is not null)
{
    <MudTable Items="_maintenanceIssueVms" Class="my-4" Hover="true" Striped="true" Dense="true">
        <HeaderContent>
            <MudTh>Issue</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Issue Date</MudTh>
            <MudTh>PID</MudTh>
            <MudTh>Corrective Action</MudTh>
            <MudTh>Action Taken</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.IssueId</MudTd>
            <MudTd DataLabel="Type">@context.DrType</MudTd>
            <MudTd DataLabel="Status">@context.SimStatus</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Date">@context.IssueDate</MudTd>
            <MudTd DataLabel="PID">@context.Pid</MudTd>
            <MudTd DataLabel="Corrective Action">@context.CorrectiveAction</MudTd>
            <MudTd DataLabel="Action Taken">@context.ActionTaken</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    bool _isBusy;

    IEnumerable<MaintenanceIssueVm> _maintenanceIssueVms = new List<MaintenanceIssueVm>();

    private async Task SetMaintenanceIssues()
    {
        _maintenanceIssueVms = await IssueService.GetMaintenanceIssueVmsForEntryTableAsync();
    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceVm")
            {
                await SetMaintenanceIssues();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetMaintenanceIssues();
        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}
