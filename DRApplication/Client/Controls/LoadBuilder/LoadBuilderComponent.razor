@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject IPlatformService PlatformService
@inject AppState AppState
@implements IDisposable

<LoadBuilderFilters></LoadBuilderFilters>

@if (@AppState.HardwareConfigVm.Id > 0 && @AppState.SoftwareSystemVm.Id > 0 && _isBusy is not true)
{
    <div>software @AppState.HardwareConfigId</div>
    <MudGrid Spacing="3">
        <MudItem xs="3">
            <MudPaper Class="m-9">
                <MudList Clickable="true" Dense="true" Color="Color.Success">
                    @foreach (var item in AppState.SoftwareSystemVms)
                    {
                        <MudListItem Text="@item.Name" Value="@item.Name" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {

    bool _isBusy;

    async Task SetSoftwareConfigs()
    {
        _isBusy = true;
        var id = Convert.ToInt32(@AppState.HardwareConfigId);
        var softwareConfigs = await LoadBuilderService.GetSoftwareSystemsByHardwareConfigId(id);
        AppState.UpdateSoftwareSystemVms( this, softwareConfigs);

        _isBusy = false;
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}