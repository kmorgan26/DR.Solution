@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject IPlatformService PlatformService

@if (!_isBusy)
{
    <LoadBuilderFilters></LoadBuilderFilters>
}


@if (_hardwareConfigId is not 0 && _isBusy == false)
{
    <div>software @_hardwareConfigId</div>
    <MudGrid Spacing="3">
        <MudItem xs="3">
            <MudPaper Class="m-9">
                <MudList Clickable="true" Dense="true" Color="Color.Success">
                    @foreach (var item in _softwareSystemVms)
                    {
                        <MudListItem Text="@item.Name" Value="@item.Name" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@code {

    bool _isBusy;
    int _hardwareConfigId = 0;

    private IEnumerable<HardwareConfigVm> _hardwareConfigVms { get; set; }
    private IEnumerable<SoftwareSystemVm> _softwareSystemVms { get; set; }

    [CascadingParameter]
    public AppStateComponent AppState { get; set; } = new();

    

    async Task SetSoftwareConfigs()
    {
        _isBusy = true;

        var softwareConfigs = await LoadBuilderService.GetSoftwareSystemsByHardwareConfigIg(_hardwareConfigId);
        _softwareSystemVms = softwareConfigs;

        _isBusy = false;
    }
}