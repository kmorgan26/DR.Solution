@namespace DRApplication.Client.Controls
@using DRApplication.Shared.Requests
@inject IPlatformService PlatformService
@inject IForeignKeyListService ForeignKeyListService
@inject AppState AppState
@implements IDisposable

@if (_notBusy)
{
    <MudPaper Class="d-flex flex-row flex-grow-1 gap-6 pa-3">

        @if (AppState.CurrentDeviceTypeVm is not null && AppState.CurrentDeviceTypeVm.Id > 0)
        {
            <GenericSelect LabelText="Hardware Config" TableName="HardwareConfigs" ForeignKeyName="DeviceTypeId" ForeignKeyValue="@AppState.CurrentDeviceTypeVm.Id"
                TopMenuItemText="Select a HW Config" SelectedValue="@AppState.CurrentHardwareConfigVm.Id" />
            
        }

        @if (AppState.CurrentHardwareConfigVm is not null && AppState.CurrentDeviceTypeVm?.Id > 0)
        {
            <GenericSelect LabelText="Sofware Systems" TableName="SoftwareSystems" ForeignKeyName="HardwareConfigId" ForeignKeyValue="@AppState.CurrentHardwareConfigVm.Id"
                   OnSelectListChanged="SetSoftwareSystemId" Request="Request" TopMenuItemText="SELECT Software System" />
        }

    </MudPaper>
}
Harware config: @AppState.CurrentHardwareConfigVm.Id

@code {

    bool _notBusy = true;

    public ForeignKeyListRequest Request { get; set; }

    async Task SetHardwareConfigId(int id)
    {
        await Task.Run(() => AppState.CurrentHardwareConfigVm.Id = id);
    }

    async Task SetSoftwareSystemId(int id)
    {
        await Task.Run(() => AppState.CurrentSoftwareSystemVm.Id = id);
    }

    async Task GetSoftwareSystemVms()
    {
        _notBusy = false;

        var request = new ForeignKeyListRequest();
        request.ForeignKeyName = "HardwareConfigId";
        request.ForeignKeyValue = AppState.CurrentHardwareConfigVm.Id.ToString();
        var vms = await ForeignKeyListService.GetForeignKeyListVmsFromPlatformListName(request); //Request

        _notBusy = true;
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}