@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject AppState AppState
@implements IDisposable

@if (@AppState.LoadVm.Id > 0 && _isBusy is not true)
{
    <MudTable Items="@AppState.SoftwareVersionVms"
          Hover="true"
          T="SoftwareVersionVm">
        <HeaderContent>
            <MudTh>Version</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Load">@context.Name</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {

    bool _isBusy;

    async Task SetSoftwareVersionsForLoad()
    {
        var items = await LoadBuilderService.GetSoftwareVersionVmsByLoadId(AppState.LoadVm.Id);
        AppState.UpdateSoftwareVersionVms(this, items);
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            //If the Current Load Changes, we have to repopulate the Software VersionsList for the new Load ID.
            if (Property == "LoadVm")
            {
                await SetSoftwareVersionsForLoad();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        await SetSoftwareVersionsForLoad();
        _isBusy = false;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}