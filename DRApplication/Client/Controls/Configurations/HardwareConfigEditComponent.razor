@inject HardwareConfigManager manager
@inject NavigationManager navigation

<div class="row">
    <div class="col-md-6 col-sm-12">
        @if (@HardwareConfigVm != null)
        {
            <EditForm Model="@HardwareConfigVm" OnValidSubmit="@UpdateHarwareConfig">

                <label for="Name">Hardware Configuration</label>
                <InputText class="form-control" @bind-Value="HardwareConfigVm.Name" />
                
                <DeviceTypeSelectComponent DeviceTypeIdChange="UpdateDeviceType"></DeviceTypeSelectComponent>

                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Size="Size.Small">Update</MudButton>
                <MudButton Link="/hardwareconfig" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Cancel</MudButton>

            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    public int HardwareConfigId { get; set; }

    [CascadingParameter]
    public AppStateComponent? AppStateComponent { get; set; }

    public HardwareConfigVm HardwareConfigVm { get; set; } = new();

    void UpdateDeviceType(int? id)
    {
        if (AppStateComponent is not null)
        {
            AppStateComponent.DeviceTypeId = Convert.ToInt32(id);
        }
    }
    protected async Task UpdateHarwareConfig()
    {
        var hardwareConfig = Mapping.Mapper.Map<HardwareConfig>(HardwareConfigVm);
        await manager.UpdateAsync(hardwareConfig);
        navigation.NavigateTo("/hardwareconfigs");
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppStateComponent is not null)
        {
            var hardwareConfig = await manager.GetByIdAsync(HardwareConfigId);
            HardwareConfigVm = Mapping.Mapper.Map<HardwareConfigVm>(hardwareConfig);
        }
    }
}