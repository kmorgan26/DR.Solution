@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject ILoadBuilderService LoadBuilderService
@implements IDisposable

<MudTable Items="@AppState.CurrentLoadVms" Class="my-4" Hover="true" Striped="true" Dense="true">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Device</MudTh>
        <MudTh>Load</MudTh>
        <MudTh>LoadID</MudTh>
        <MudTh>DeviceID</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Device">@context.Device</MudTd>
        <MudTd DataLabel="Load Name">@context.LoadName</MudTd>
        <MudTd DataLabel="Load ID">@context.LoadId</MudTd>
        <MudTd DataLabel="Device ID">@context.DeviceId</MudTd>
        
        <MudTd DataLabel="EDIT">
            <a href="/currentload/edit/@context.Id" role="button">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"></MudIcon>    
            </a>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    bool _isBusy;

    private async Task SetLoads()
    {
        var currentLoadVms = await LoadBuilderService.GetCurrentLoadVmsByDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateCurrentLoadVms(this, currentLoadVms);
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceTypeVm")
            {
                await SetLoads();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        await SetLoads();
        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}