@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject NavigationManager navigation
@inject IPlatformService PlatformService
@inject IHardwareService HardwareService
@inject LoadManager LoadManager
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@AppState.LoadVm" OnValidSubmit="@UpdateLoad">

            <HardwareConfigSelect OnHardwareConfigIdChanged="UpdateDeviceTypeForLoad" />

            <MudTextField @bind-Value="AppState.LoadVm.Name" Class="my-6" Label="Load Name" Variant="Variant.Outlined"></MudTextField>

            <MudCheckBox Class="my-6" Label="Accepted?" @bind-Checked="@AppState.LoadVm.IsAccepted" />

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Update" />
                <CancelButton Url="load" />
            </MudPaper>

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int LoadId { get; set; }

    async Task UpdateDeviceTypeForLoad(int id)
    {
        if (id > 0)
        {
            var hardwareConfigVm = await HardwareService.GetHardwareConfigVmById(id);

            var loadVm = AppState.LoadVm;
            loadVm.HardwareConfigId = id;
            AppState.UpdateLoadVm(this, loadVm);
            AppState.UpdateHardwareConfigVm(this, hardwareConfigVm);

        }
    }

    protected async Task UpdateLoad()
    {
        var load = Mapping.Mapper.Map<Load>(AppState.LoadVm);
        await LoadManager.UpdateAsync(load);
        Snackbar.Add($"Load was updated", Severity.Success);
        navigation.NavigateTo("/load");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        var load = await LoadManager.GetByIdAsync(LoadId);
        var loadVm = Mapping.Mapper.Map<LoadVm>(load);
        AppState.UpdateLoadVm(this, loadVm);
        _isBusy = false;
    }

}
