@namespace DRApplication.Client.Controls
@inject ILoadService LoadService
@inject IPlatformService PlatformService
@inject IHardwareService HardwareService
@inject AppState AppState
@implements IDisposable

<LoadDetailsFilters />

@if (!_isbusy)
{
    <MudGrid>
        <MudItem xs="12" sm="9" md="6" lg="3">
            <MudAlert Severity="Severity.Success">Software Versions</MudAlert>
            <SoftwareVersionList />
        </MudItem>
        <MudItem xs="12" sm="9" md="6" lg="3">
            <MudAlert Severity="Severity.Success">Devices with this Software Load</MudAlert>
            <MudTable Items="@AppState.DeviceVms" Hover="true" T="DeviceVm" Dense="true">
                <HeaderContent>
                    <MudTh>Device</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="System">@context.Device</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter]
    public int LoadId { get; set; }

    bool _isbusy;

    async Task SetVersionLoadVmsForLoad()
    {
        if (AppState.LoadVm.Id > 0)
        {
            var items = await LoadService.GetVersionsLoadVmsByLoadId(AppState.LoadVm.Id);
            AppState.UpdateVersionsLoadVms(this, items);
        }
        else
        {
            AppState.UpdateVersionsLoadVms(this, new List<VersionsLoadVm>());
        }
    }

    async Task GetDeviceVmsForLoad()
    {
        if (AppState.LoadVm.Id > 0)
        {
            var deviceVms = await PlatformService.GetDeviceVmsByLoadId(AppState.LoadVm.Id);
            AppState.UpdateDeviceVms(this, deviceVms);
        }
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "SoftwareSystemVm")
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }

    protected override async Task OnInitializedAsync()
    {
        _isbusy = true;
        AppState.StateChanged += OnStateChanged;

        var loadVm = await LoadService.GetLoadVmById(LoadId);
        AppState.UpdateLoadVm(this, loadVm);

        var hardwareConfigVm = await HardwareService.GetHardwareConfigVmById(loadVm.HardwareConfigId);
        AppState.UpdateHardwareConfigVm(this, hardwareConfigVm);

        await SetVersionLoadVmsForLoad();
        await GetDeviceVmsForLoad();

        _isbusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}