@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject AppState AppState
@implements IDisposable

@if (!_isBusy && AppState.LoadVms is not null)
{
    <MudSelect Variant="Variant.Outlined" T="int" Class="my-3" Label="Loads" Value="@AppState.LoadVm.Id" ValueChanged="@OnLoadIdChanged">
        <MudSelectItem Value="0">SELECT Load</MudSelectItem>
        @foreach (var item in @AppState.LoadVms)
        {
            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
        }
    </MudSelect>
}

@code {

    bool _isBusy;

    [Parameter]
    public EventCallback<int> OnLoadIdChanged { get; set; }

    private async Task SetLoadVms()
    {
        var loadVms = await LoadBuilderService.GetLoadVmByDeviceTypeId(AppState.DeviceTypeVm.Id);
        AppState.UpdateLoadVms(this, loadVms);
    }

    /// <summary>
    /// When the DeviceTypeVm changes, the LoadVms populate with a new list for that Device Type
    /// With the new list populating, the LoadVms is set to a new instance, setting the ID to 0
    /// and the Dropdown list will display "SELECT Load"
    /// </summary>
    /// <param name="Source"></param>
    /// <param name="Property"></param>
    /// <returns></returns>
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "DeviceTypeVm")
            {
                await SetLoadVms();
                AppState.UpdateLoadVms(this, new List<LoadVm>());
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        await SetLoadVms();
        _isBusy = false;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

}