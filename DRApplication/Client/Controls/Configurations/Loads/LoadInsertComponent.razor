@namespace DRApplication.Client.Controls

@inject AppState AppState
@inject LoadManager LoadManager
@inject NavigationManager navigation

@if (@_loadInsertVm != null)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@_loadInsertVm" OnValidSubmit="@InsertLoad">

            <HardwareConfigSelect OnHardwareConfigIdChanged="UpdateHardwareConfig"/>

            <MudTextField @bind-Value="_loadInsertVm.Name" Class="my-6" Label="Load Name" Variant="Variant.Outlined"></MudTextField>

            <MudPaper Elevation="0">
                <SubmitButton ButtonText="Insert" />
                <CancelButton Url="load" />
            </MudPaper>

        </EditForm>
    </MudItem>

}

@code {

    private LoadInsertVm _loadInsertVm { get; set; } = new();

    void UpdateHardwareConfig(int id)
    {
        if (id > 0)
        {
            var hardwareConfigVm = AppState.HardwareConfigVm;
            hardwareConfigVm.Id = id;
            AppState.UpdateHardwareConfigVm(this, hardwareConfigVm);
        }

    }

    private async Task InsertLoad()
    {
        _loadInsertVm.HardwareConfigId = AppState.HardwareConfigVm.Id;
        var load = Mapping.Mapper.Map<Load>(_loadInsertVm);
        await LoadManager.InsertAsync(load);
        navigation.NavigateTo("/load");
    }
}