@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject AppState AppState
@implements IDisposable

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

@if (@AppState.DeviceTypeVm.Id > 0 && _isBusy is not true)
{
    <MudItem xs="12" sm="9" md="6" lg="4" Class="mt-6">
        <MudTable Items="@AppState.LoadVms"
              @ref="mudTable"
              Hover="true"
              RowClassFunc="@SelectedRowClassFunc"
              OnRowClick="RowClickEvent"
              T="LoadVm">
            <HeaderContent>
                <MudTh>Load</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Load">@context.Name</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
}

@code {

        bool _isBusy;
        private int selectedRowNumber = -1;
        private MudTable<LoadVm> mudTable;
        private List<string> clickedEvents = new();
        private string SelectedRowClassFunc(LoadVm element, int rowNumber)
        {
            if (selectedRowNumber == rowNumber)
            {
                selectedRowNumber = -1;
                clickedEvents.Add("Selected Row: None");
                return string.Empty;
            }
            else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
            {
                selectedRowNumber = rowNumber;
                clickedEvents.Add($"Selected Row: {rowNumber}");
                return "selected";
            }
            else
            {
                return string.Empty;
            }
        }

        private void RowClickEvent(TableRowClickEventArgs<LoadVm> tableRowClickEventArgs)
        {
            clickedEvents.Add("Row has been clicked");
        }

        async Task SetLoads()
        {
            var items = await LoadBuilderService.GetLoadVmByDeviceTypeId(AppState.DeviceTypeVm.Id);
            AppState.UpdateLoadVms(this, items);
        }

        private async Task AppState_StateChanged(ComponentBase Source, string Property)
        {
            if (Source != this)
            {
                if (Property == "DeviceTypeVm")
                {
                    await SetLoads();
                    AppState.UpdateLoadVm(this, new LoadVm());
                }

                await InvokeAsync(StateHasChanged);
            }
        }

        protected override async Task OnInitializedAsync()
        {
            _isBusy = true;
            AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
            await SetLoads();
            _isBusy = false;
        }

        void IDisposable.Dispose()
        {
            AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
        }
}