@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject ILoadService LoadBuilderService
@implements IDisposable

<NewButton Url="/load/create" />
@if (!_isBusy)
{
    <MudTable Items="@AppState.LoadVms" Class="my-4" Hover="true" Striped="true" Dense="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Accepted?</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Load Name">@context.Name</MudTd>
            <MudTd DataLabel="Accepted?">@context.IsAccepted</MudTd>
            <MudTd DataLabel="EDIT">
                <a href="/load/edit/@context.Id" role="button">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"></MudIcon>
                </a>
            </MudTd>
        </RowTemplate>
    </MudTable>
}


@code {

    bool _isBusy;

    private async Task SetLoads()
    {
        var loadVms = await LoadBuilderService.GetLoadVmsByHardwareConfigId(AppState.HardwareConfigVm.Id);
        AppState.UpdateLoadVms(this, loadVms);
    }

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "HardwareConfigVm")
            {
                await SetLoads();
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetLoads();
        _isBusy = false;
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}