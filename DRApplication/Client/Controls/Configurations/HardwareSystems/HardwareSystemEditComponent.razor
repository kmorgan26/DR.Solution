@namespace DRApplication.Client.Controls
@inject NavigationManager navigation
@inject AppState AppState
@inject ISnackbar Snackbar
@inject IMapperService MapperService
@inject IHardwareService HardwareService

@if (_hardwareSystemEditVm.Id > 0 && !_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="_hardwareSystemEditVm" OnValidSubmit="@UpdateHardwareSystem">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <MudTextField @bind-Value="_hardwareSystemEditVm.Name" 
                For="(() => _hardwareSystemEditVm.Name)"
                Class="my-6" 
                Label="Hardware System" 
                Variant="Variant.Outlined" />

            <SubmitButton ButtonText="Update" />
            <CancelButton Url="/hardwaresystem" />

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int HardwareSystemId { get; set; }

    private HardwareSystemEditVm _hardwareSystemEditVm = new();

    protected async Task UpdateHardwareSystem()
    {
        var result = await HardwareService.UpdateHardwareSystemFromHardwareSystemEditVm(_hardwareSystemEditVm);

        if (result)
            Snackbar.Add($"{_hardwareSystemEditVm.Name} was updated", Severity.Success);

        navigation.NavigateTo("/hardwaresystem");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        _hardwareSystemEditVm = await HardwareService.GetHardwareSystemEditVmById(HardwareSystemId);
        _isBusy = false;
    }
}
