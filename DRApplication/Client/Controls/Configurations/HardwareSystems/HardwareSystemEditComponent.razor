@namespace DRApplication.Client.Controls
@inject HardwareSystemManager manager
@inject NavigationManager navigation
@inject AppState AppState
@inject ISnackbar Snackbar
@inject IMapperService MapperService

@if (AppState.HardwareSystemVm.Id > 0)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="AppState.HardwareSystemVm" OnValidSubmit="@UpdateHardwareSystem">

            <MudTextField @bind-Value="AppState.HardwareSystemVm.Name" Class="my-6" Label="Hardware System" Variant="Variant.Outlined"></MudTextField>

            <SubmitButton ButtonText="Update" />
            <CancelButton Url="/hardwaresystem" />

        </EditForm>
    </MudItem>
}

@code {

    [Parameter]
    public int HardwareSystemId { get; set; }

    protected async Task UpdateHardwareSystem()
    {
        var hardwareSystem = await MapperService.HardwareSystemFromHardwareSystemVmAsync(AppState.HardwareSystemVm);
        await manager.UpdateAsync(hardwareSystem);
        Snackbar.Add($"Hardware System was updated", Severity.Success);
        navigation.NavigateTo("/hardwaresystem");
    }

    protected override async Task OnInitializedAsync()
    {
        var hardwareSystem = await manager.GetByIdAsync(HardwareSystemId);
        var hardwareSystemVm = await MapperService.HardwareSystemVmFromHardwareSystemAsync(hardwareSystem);
        AppState.UpdateHardwareSystemVm(this, hardwareSystemVm);
    }
}
