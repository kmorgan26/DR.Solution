@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject NavigationManager navigation
@inject IPlatformService PlatformService
@inject IMapperService MapperService
@inject HardwareConfigManager HardwareConfigManager
@inject ISnackbar Snackbar

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="_hardwareConfigEditVm" OnValidSubmit="@UpdateHardwareConfig">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <DeviceTypeSelect OnDeviceTypeIdChanged="UpdateDeviceTypeForHardwareConfig"></DeviceTypeSelect>

            <MudTextField @bind-Value="_hardwareConfigEditVm.Name" 
                Class="my-6" 
                For="(() => _hardwareConfigEditVm.Name)"
                Label="Hardware Configuration" 
                Variant="Variant.Outlined" />

            <SubmitButton ButtonText="Update" />
            <CancelButton Url="hardwareconfig" />

            <ValidationSummary />

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int HardwareConfigId { get; set; }

    private HardwareConfigEditVm _hardwareConfigEditVm = new();

    async Task UpdateDeviceTypeForHardwareConfig(int id)
    {
        if (id > 0)
        {
            _hardwareConfigEditVm.DeviceTypeId = id;
            var deviceTypeVm = await PlatformService.GetDeviceTypeVmByIdAsync(id);
            AppState.UpdateDeviceTypeVm(this, deviceTypeVm);

        }
    }

    protected async Task UpdateHardwareConfig()
    {
        var hardwareConfig = MapperService.HardwareConfigFromHardwareConfigEditVm(_hardwareConfigEditVm);
        var result = await HardwareConfigManager.UpdateAsync(hardwareConfig);

        if (result is not null)
            Snackbar.Add($"Hardware Configuration was updated", Severity.Success);

        navigation.NavigateTo("/hardwareconfig");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        var hardwareConfig = await HardwareConfigManager.GetByIdAsync(HardwareConfigId);
        _hardwareConfigEditVm = MapperService.HardwareConfigEditVmFromHardwareConfig(hardwareConfig);
        _isBusy = false;
    }

}