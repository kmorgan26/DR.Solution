@namespace DRApplication.Client.Controls
@inject ISoftwareService SoftwareService
@inject AppState AppState
@implements IDisposable

@if (!_isBusy)
{
    <MudSelect Variant="Variant.Outlined" T="int" Label="Software Version" Value="@AppState.SoftwareVersionVm.Id" ValueChanged="@OnSoftwareVersionIdChanged">
        <MudSelectItem Value="0">SELECT Software Version</MudSelectItem>
        @foreach (var item in @AppState.SoftwareVersionVms)
        {
            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
        }
    </MudSelect>
}

@code {

    bool _isBusy;

    [Parameter]
    public EventCallback<int> OnSoftwareVersionIdChanged { get; set; }

    private async Task SetSoftwareVersions()
    {
        var items = await SoftwareService.GetSoftwareVersionVmsBySoftwareSystemId(AppState.SoftwareSystemVm.Id);
        AppState.UpdateSoftwareVersionVms(this, items);
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            AppState.UpdateSoftwareVersionVm(this, new SoftwareVersionVm());
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetSoftwareVersions();
        _isBusy = false;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }

}