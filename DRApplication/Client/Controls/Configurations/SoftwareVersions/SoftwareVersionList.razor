@namespace DRApplication.Client.Controls
@inject ISoftwareService SoftwareService
@inject AppState AppState
@implements IDisposable

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

</style>

@if (@AppState.HardwareConfigVm.Id > 0 && @AppState.SoftwareSystemVm.Id > 0 && _isBusy is not true)
{
    <MudTable Items="@AppState.SoftwareVersionVms"
          @ref="mudTable"
          Hover="true"
          RowClassFunc="@SelectedRowClassFunc"
          Dense="true"
          OnRowClick="RowClickEvent"
          T="SoftwareVersionVm">
        <HeaderContent>
            <MudTh>Version</MudTh>
            <MudTh>Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Version">@context.Name</MudTd>
            <MudTd DataLabel="Date">@context.VersionDate.Value.ToShortDateString()</MudTd>
        </RowTemplate>
    </MudTable>
}
@code{
    bool _isBusy;
    private int selectedRowNumber = -1;
    private MudTable<SoftwareVersionVm> mudTable;

    private string SelectedRowClassFunc(SoftwareVersionVm element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            AppState.UpdateSoftwareVersionVm(this, new SoftwareVersionVm());
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Id == element.Id)
        {
            AppState.UpdateSoftwareVersionVm(this, element);
            selectedRowNumber = rowNumber;
            return "selected";
        }
        
        else
        {
            return string.Empty;
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<SoftwareVersionVm> tableRowClickEventArgs)
    {
        //clickedEvents.Add("Row has been clicked");
    }

    async Task SetSoftwareVersions()
    {
        var items = await SoftwareService.GetSoftwareVersionVmsBySoftwareSystemId(AppState.SoftwareSystemVm.Id);
        AppState.UpdateSoftwareVersionVms(this, items);
    }

    /// <summary>
    /// State Change only fires on change of SoftwareSystemVm. Any changes to HardwareConfig fires in SoftwareSystem
    /// and changes to Device Type will cascade through Hardware Config. A new SoftwareVersionVm is also updated
    /// and the default ID will be the default 0 for a new SoftwareVersionVm
    /// </summary>
    /// <param name="Source"></param>
    /// <param name="Property"></param>
    /// <returns></returns>
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "SoftwareSystemVm")
            {
                await SetSoftwareVersions();
                AppState.UpdateSoftwareVersionVm(this, new SoftwareVersionVm());
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += OnStateChanged;
        await SetSoftwareVersions();
        _isBusy = false;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}

