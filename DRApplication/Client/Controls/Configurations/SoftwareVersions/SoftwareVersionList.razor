@namespace DRApplication.Client.Controls
@inject ILoadBuilderService LoadBuilderService
@inject AppState AppState
@implements IDisposable


@if (@AppState.HardwareConfigVm.Id > 0 && @AppState.SoftwareSystemVm.Id > 0 && _isBusy is not true)
{
    <MudGrid Spacing="3">
        <MudItem xs="3">
            <MudPaper Class="m-9">
                <MudTable Items="@AppState.SoftwareVersionVms" Hover="true" Breakpoint="Breakpoint.Sm" T="SoftwareVersionVm">
                    <HeaderContent>
                        <MudTh>Version</MudTh>
                        <MudTh>Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                            <MudTd DataLabel="Version">@context.Name</MudTd>
                            <MudTd DataLabel="Date">@context.VersionDate.ToShortDateString()</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    bool _isBusy;

    async Task SetSoftwareVersions()
    {
        var items = await LoadBuilderService.GetSoftwareVersionsBySoftwareSystemId(AppState.SoftwareSystemVm.Id);
        AppState.UpdateSoftwareVersionVms(this, items);

    }
    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "SoftwareSystemVm")
            {
                await SetSoftwareVersions();
                AppState.UpdateSoftwareVersionVm(this, new SoftwareVersionVm());
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        AppState.StateChanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
        await SetSoftwareVersions();
        _isBusy = false;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}
