@namespace DRApplication.Client.Controls
@inject AppState AppState
@inject NavigationManager navigation
@inject IHardwareService HardwareService
@inject ISnackbar Snackbar
@inject IMapperService MapperService
@inject HardwareVersionManager HardwareVersionManager
@inject ManagerService ManagerService

@if (!_isBusy)
{
    <MudItem xs="12" sm="12" md="4" lg="3">

        <EditForm Model="@AppState.HardwareVersionVm" OnValidSubmit="@UpdateHardwareVersion">

            <FluentValidationValidator DisableAssemblyScanning="true" />

            <MudTextField @bind-Value="@AppState.HardwareVersionVm.Name" 
                Class="my-6" 
                For="(() => AppState.HardwareVersionVm.Name)"
                Label="Hardware Version" 
                Variant="Variant.Outlined" />

            <HardwareSystemSelect OnHardwareSystemIdChanged="UpdateHardwareSystemId" />

            <MudDatePicker Class="my-6" @bind-Date="@AppState.HardwareVersionVm.VersionDate" 
                For="(() => AppState.HardwareVersionVm.VersionDate)"
                Label="Version Date" />

            <SubmitButton ButtonText="Update" />
            <CancelButton Url="hardwareversion" />

        </EditForm>
    </MudItem>
}

@code {
    bool _isBusy;

    [Parameter]
    public int HardwareVersionId { get; set; }

    private HardwareVersionEditVm _hardwareVersionEditVm = new();

    async Task UpdateHardwareSystemId(int id)
    {
        if (id > 0)
        {
            var hardwareSystem = await Task.Run(() => ManagerService.HardwareSystemManager().GetByIdAsync(id));
            var hardwareSystemVm = await MapperService.HardwareSystemVmFromHardwareSystemAsync(hardwareSystem);
            var hardwareVersionVm = AppState.HardwareVersionVm;
            hardwareVersionVm.HardwareSystemId = id;
            AppState.UpdateHardwareSystemVm(this, hardwareSystemVm);
            AppState.UpdateHardwareVersionVm(this, hardwareVersionVm);
        }
    }

    protected async Task UpdateHardwareVersion()
    {
        _hardwareVersionEditVm = await MapperService.HardwareVersionEditVmFromHardwareVersionVmAsync(AppState.HardwareVersionVm);
        var hardwareVersion = await MapperService.HardwareVersionFromHardwareVersionEditVmAsync(_hardwareVersionEditVm);
        var result = await HardwareVersionManager.UpdateAsync(hardwareVersion);
        Snackbar.Add($"Hardware Version was updated", Severity.Success);
        navigation.NavigateTo("/hardwareversion");
    }

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        var hardwareVersionVm = await HardwareService.GetHardwareVersionVmById(HardwareVersionId);
        AppState.UpdateHardwareVersionVm(this, hardwareVersionVm);
        _isBusy = false;
    }
}