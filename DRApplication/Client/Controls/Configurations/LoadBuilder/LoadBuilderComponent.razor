@namespace DRApplication.Client.Controls
@inject AppState AppState
@implements IDisposable

<LoadBuilderFilters></LoadBuilderFilters>

@if (AppState.SoftwareSystemVm.Id > 0)
{
    <MudGrid Class="mt-10">
        <MudItem xs="12" sm="12" md="4" lg="3">
            <MudAlert Severity="Severity.Success">Select a Version for this Software System</MudAlert>
            <SoftwareVersionList></SoftwareVersionList>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" lg="3">
            <VersionsLoadList></VersionsLoadList>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" lg="3">
            <MudAlert Severity="Severity.Success">Select a Load to build</MudAlert>
            <LoadList></LoadList>
        </MudItem>
    </MudGrid>
}

@code {

    private async Task AppState_StateChanged(ComponentBase Source, string Property)
    {
        if (Source != this)
        {
            if (Property == "SoftwareSystemVm")
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    async void OnStateChanged(ComponentBase componentBase, string property)
    {
        await AppState_StateChanged(componentBase, property);
    }
    protected override void OnInitialized()
    {
        AppState.StateChanged += OnStateChanged;
    }

    void IDisposable.Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}