@namespace DRApplication.Client.Controls
@inject IMapperService MapperService
@inject AppState AppState
@inject SoftwareSystemManager SoftwareSystemManger
@inject NavigationManager navigation

@if (_softwareConfigInsertVm != null)
{
    <MudItem xs="12" sm="12" md="4" lg="3">
        <EditForm Model="@_softwareConfigInsertVm" OnValidSubmit="@InsertSoftwareSystem">

            <HardwareConfigSelect OnHardwareConfigIdChanged="UpdateHardwareConfig"></HardwareConfigSelect>

            <MudTextField @bind-Value="_softwareConfigInsertVm.Name" Class="my-6" Label="System Name" Variant="Variant.Outlined"></MudTextField>

            <SubmitButton ButtonText="Insert" />
            <CancelButton Url="softwaresystem" />
        </EditForm>
    </MudItem>

}

@code {

    private SoftwareSystemInsertVm _softwareConfigInsertVm { get; set; } = new();

    void UpdateHardwareConfig(int id)
    {
        if (id > 0)
        {
            var hardwareConfigVm = AppState.HardwareConfigVm;
            hardwareConfigVm.Id = id;
            AppState.UpdateHardwareConfigVm(this, hardwareConfigVm);
        }

    }

    private async Task InsertSoftwareSystem()
    {
        _softwareConfigInsertVm.HardwareConfigId = AppState.HardwareConfigVm.Id;
        var softwareSystem = MapperService.SoftwareSystemFromSoftwareSystemInsertVm(_softwareConfigInsertVm);
        await SoftwareSystemManger.InsertAsync(softwareSystem);
        navigation.NavigateTo("/softwaresystem");
    }
}
