@inject SoftwareSystemManager manager
@inject NavigationManager navigation

<div class="form-group">
    <label>Software System</label>
    <InputSelect ValueExpression="@(()=> SelectedSoftwareSystemId)" id="softwareSystemSelect" DisplayName="Software System" class="form-control" Value="SelectedSoftwareSystemId"
                 ValueChanged="@((int? value) => ChangeSoftwareSystem(value))">
        <option value=0>------</option>
        @foreach (var item in _softwareSystemVms)
        {
            <option value="@item.Id">@item.Name</option>
        }
    </InputSelect>
</div>

@code {

    [Parameter]
    public EventCallback<int?> SoftwareSystemIdChange { get; set; }

    [Parameter]
    public int? SelectedSoftwareSystemId { get; set; }

    [CascadingParameter]
    public AppStateComponent? AppStateComponent { get; set; }

    private List<GenericListVm> _softwareSystemVms = new();

    private async Task ChangeSoftwareSystem(int? value)
    {
        if (AppStateComponent is not null)
        {
            SelectedSoftwareSystemId = Convert.ToInt32(value);
            AppStateComponent.AppStateReset();
            await SoftwareSystemIdChange.InvokeAsync(SelectedSoftwareSystemId);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var softwareSystems = await manager.GetAllAsync();
        _softwareSystemVms = Mapping.Mapper.Map<List<GenericListVm>>(softwareSystems);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (AppStateComponent is not null && AppStateComponent.SoftwareSystemId is not null)
            {
                await Task.Delay(0);
                SelectedSoftwareSystemId = AppStateComponent.SoftwareSystemId != null ? AppStateComponent.SoftwareSystemId : 0;
            }
        }
        catch { }
    }

}
